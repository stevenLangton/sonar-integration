@using JsPlc.Ssc.Link.Models
@{
    //var currentUser = TempData["CurrentUser"] as UserView;
    //string managerId = ""; // manager LoggedId, so get their colleagueId
    //if (currentUser != null && currentUser.Colleague != null && currentUser.Colleague.ColleagueId != null)
    //{
    //    managerId = currentUser.Colleague.ColleagueId;
    //}
    var viewType = TempData["ViewType"];
}

@if (ViewBag.ViewType == "team")
{
    <h2>My Team</h2>
}
else
{
    <h2>My Link Meetings</h2>
}

<div id="linkpage">
    @*<h3 style="color: red">Note: This is a work in progress, for collapsible views/accordion etc.</h3>*@

    <div class="row">
        <!-- ko foreach: $root.dataModel() -->
        <div class="col-md-4" style="padding-bottom: 30px; border-bottom: solid 2px silver">
            <!-- each colleague -->
            <!-- 3 person view 12/4 = 3 -->
            <div class="col-md-12"><h3><span data-bind="text: FullName"></span></h3></div>
            <div class="col-md-6">
                <div class="col-md-12" style="height: 130px;"><img src="http://www.freelanceme.net/Images/default%20profile%20picture.png" data-bind="attr: {alt: FullName, title: FullName}" class="img-circle" width="130"></div>
                <div class="col-md-12" style="padding-left: 30px"><a data-bind="attr: {'href': CreateLink}" class="btn btn-primary btn-sm">Create Review</a></div>
            </div>
            <div class="col-md-6">
                <h4 style="margin: 0; padding: 0"><span style="color: #1fb2c7">Meetings:</span></h4>
                <!-- ko if: HasMeetings -->
                @Html.Partial("../Team/_MeetingHistoryComponent")
                <!-- /ko -->
                <!-- ko ifnot: HasMeetings -->
                <h4 style="color: brown">None</h4>
                <!-- /ko -->
            </div>
        </div>
        <!-- /ko -->
    </div>

    <!-- how will we manage pagination.. option: use Skip and Take in Linq in ajax call -->
    @*<nav>
            <ul class="pagination">
                <li>
                    <a href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                <li><a href="#">1</a></li>
                <li><a href="#">2</a></li>
                <li><a href="#">3</a></li>
                <li><a href="#">4</a></li>
                <li><a href="#">5</a></li>
                <li>
                    <a href="#" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>*@
</div>

<script type="text/javascript">
    require(["jquery", "knockout", "moment", "URI", "underscore", "common", "helpers"], function ($, ko, moment, URI, _, common, helpers) {

        function PageViewModel() {

            var self = this;

            self.dataModel = ko.observable(""); // Array of TeamView objects
            self.dataAvailable = ko.observable(false);

            self.bind = function () { };

            var ListOfTeamViews = [];

            var getEditOrViewLink = function (item) {
                var editLink = common.getSiteRoot() + "LinkForm/Edit/" + item.MeetingId;
                var viewLink = common.getSiteRoot() + "LinkForm/ViewMeeting/" + item.MeetingId;

                return (item.Status == 0) ? editLink : viewLink;
            }

            var getCreateLink = function (colleagueId) {
                var createLink = common.getSiteRoot() + "LinkForm/Create/?colleagueId=" + colleagueId;
                return createLink;
            }
            var buildViewModels = function (data) {
                moment.locale("en-gb"); // Set Locale for moment (aka moment.locale("en-gb"))
                var meetingDate = moment(data.MeetingDate).format("L"); // we get dd/mm/yyyy

                // Extract tree from List<LinkMeetingView>
                var buildMeetingsForMember = function (meetingsData, colleagueId) {

                    var allYears = _.pluck(meetingsData, "Year");
                    var years = _.uniq(allYears, function (item) { return item; });
                    //return {
                    //    Years: years,
                    //}

                    var yearsMore = [];
                    var yrId = 0;
                    // for each year find periods
                    var yearsWithPeriods = _.each(years, function (yr) {

                        var yearsMeetings = _.filter(meetingsData, function (item) {
                            return (item.Year === yr);
                        });
                        var allPeriodsForYear = _.pluck(yearsMeetings, "Period");

                        var periods = _.uniq(allPeriodsForYear, function (item) { return item; });

                        var periodWithMeetings = [];
                        // iterate periods
                        var pId = 0;
                        _.each(periods, function (period) {
                            var meetingsForPeriod = _.filter(meetingsData, function (item) {
                                return (item.Year === yr && item.Period === period);
                            });
                            meetingsForPeriod = _.sortBy(meetingsForPeriod, "MeetingDate");
                            var sortedMeetings = _.map(meetingsForPeriod, function (item) {
                                return {
                                    MeetingDate: moment(item.MeetingDate).format("L"),
                                    Status: item.Status, // 1 = Completed, 0 = InComplete
                                    ActionLink: getEditOrViewLink(item)
                                }
                            });
                            pId = pId + 1;
                            periodWithMeetings.push({ Period: period, PeriodId: '_period' + pId + '_' + colleagueId, Meetings: sortedMeetings });
                        });
                        yrId = yrId + 1;
                        yearsMore.push({ Year: yr, YearId: '_year' + yrId + '_' + colleagueId, Periods: periodWithMeetings });
                    });

                    return yearsMore;
                }

                // each TeamView item
                _.each(data, function (item) {

                    // pre process each item
                    item.MeetingDate = moment(item.MeetingDate).format("L");

                    //debugger;

                    // Build the item
                    var MemberView = {
                        Member: item,
                        CreateLink: getCreateLink(item.ColleagueId),
                        // extract years out of each data.Meetings (i.e from List<LinkMeetingView>)
                        MeetingYears: buildMeetingsForMember(item.Meetings, item.ColleagueId),
                        ColleagueId: item.ColleagueId,
                        FullName: item.FirstName + " " + item.LastName,
                        HasMeetings: false,
                    }
                    if (MemberView.MeetingYears.length > 0) { MemberView.HasMeetings = true; }
                    // add item to array
                    ListOfTeamViews.push(MemberView);
                });

                self.dataModel(ListOfTeamViews);
            };

            // ### GET LinkForm Data (assume there is data, it will show up), we may have to build a Get method which returns a blank Link Meeting template
            self.loadPageData = function (myOrTeams) {
                //debugger;
                $.ajax({
                    url: common.getSiteRoot() + "Team/GetMeetings/?myOrTeams=" + myOrTeams, // "MyMeetings" or "TeamMeetings"
                    method: "GET"
                })
                    .done(function (data) {
                        //debugger;
                        if (data == "Error") {
                            $('#msgs').html("No data");
                            self.dataAvailable(false);
                        }
                        else {
                            $('#msgs').html("Fetch success");
                            // Maybe we directly bind the data to the Linkpage.
                            // data = IEnum<TeamView> or Array of TeamViews
                            //self.dataModel(data);
                            // And lets assume we always get an array of TeamView  (for colleagues, it will be 1 element array of TeamView)

                            //And not use this ..
                            buildViewModels(data);

                            self.dataAvailable(true);
                            self.bind();
                        }
                    })
                    .fail(function () {
                        self.dataAvailable(false);
                        $('#msgs').html("Error occured");
                    });
            }
        }

        $(document).ready(function () {
            moment.locale("en-gb"); // Set Locale for moment (aka moment.locale("en-gb"))

            var vm = new PageViewModel();

            var binder = function () {
                ko.applyBindings(vm, $("#linkpage")[0]); // important - we have to refer to div element with index 0.
            };
            vm.bind = binder;


            //debugger;
            // Used by 2 actions methods
            //  /Team/Meetings and /Team/MyMeetings
            var myOrTeams = "@viewType";

            console.log("Trying to call ajax for meetings: " + myOrTeams);
            // Show meeting data once loaded from GET
            vm.loadPageData(myOrTeams);
        });
    });

</script>
